const isBrowser = typeof window !== "undefined";

// A "gyártó" függvény most már egy dinamikus ID-t is elfogad
const createStorageService = (baseKey, dynamicId = null) => {
  const key = dynamicId ? `${baseKey}-${dynamicId}` : baseKey;

  // ... a getItems, addItem, updateItem, deleteItem függvények itt változatlanok ...
  // ... csak a 'key' változót használják, amit fentebb definiáltunk ...
  const getItems = () => {
    if (!isBrowser) return [];
    try {
      const data = localStorage.getItem(key);
      const items = data ? JSON.parse(data) : [];
      let needsUpdate = false;
      const checkedItems = items.map((item, index) => {
        if (!item.id) {
          needsUpdate = true;
          return { ...item, id: `${item.date || Date.now()}-${index}` };
        }
        return item;
      });
      if (needsUpdate) {
        localStorage.setItem(key, JSON.stringify(checkedItems));
      }
      return checkedItems;
    } catch (error) {
      console.error(`Error parsing ${key} from localStorage`, error);
      return [];
    }
  };
  const addItem = (newItem) => {
    const items = getItems();
    const entryToAdd = { ...newItem, id: Date.now() };
    const updatedList = [...items, entryToAdd];
    localStorage.setItem(key, JSON.stringify(updatedList));
    return updatedList;
  };
  const updateItem = (updatedItem) => {
    const items = getItems();
    const updatedList = items.map((item) =>
      item.id === updatedItem.id ? updatedItem : item
    );
    localStorage.setItem(key, JSON.stringify(updatedList));
    return updatedList;
  };
  const deleteItem = (idToDelete) => {
    const items = getItems();
    const updatedList = items.filter((item) => item.id !== idToDelete);
    localStorage.setItem(key, JSON.stringify(updatedList));
    return updatedList;
  };
  // Új függvény a teljes adat törléséhez
  const deleteAllItems = () => {
    if (!isBrowser) return;
    localStorage.removeItem(key);
  };

  return {
    get: getItems,
    add: addItem,
    update: updateItem,
    delete: deleteItem,
    deleteAll: deleteAllItems,
  };
};

// A régi szolgáltatások megmaradnak
export const refuelingService = createStorageService("nexus-maximus-refuelings");
export const maintenanceService = createStorageService("nexus-maximus-maintenances");

// Új, dinamikus szolgáltatás-generátorok
export const getInvestmentService = (worksheetId) =>
  createStorageService("nexus-maximus-investments", worksheetId);
export const getAssetTypeService = (worksheetId) =>
  createStorageService("nexus-maximus-asset-types", worksheetId);

// Külön szolgáltatás a munkalapok listájához
export const worksheetService = createStorageService("nexus-maximus-worksheets");